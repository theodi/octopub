<%= bootstrap_form_tag url: url, method: method, data: { 'form-data' => (@s3_direct_post.fields), 'url' => @s3_direct_post.url, 'host' => URI.parse(@s3_direct_post.url).host } do |f| %>
  <%= f.text_field "dataset[name]", label: "Dataset name", value: @dataset.name, disabled: !@dataset.id.nil?, required: true, placeholder: t(:'dataset.name') %>
  <% if @dataset.id.nil? %>
    <%= f.select "dataset[owner]", organization_select_options, { label: "Owner" }, { class: "selectpicker form-control show-tick" } %>
  <% end %>
  <%= f.text_area "dataset[description]", label: "Dataset description", value: @dataset.description, placeholder: t(:'dataset.description')  %>
  <%= f.text_field "dataset[publisher_name]", label: "Publisher name", value: @dataset.publisher_name, placeholder: t(:'dataset.publisher_name') %>
  <%= f.url_field "dataset[publisher_url]", label: "Publisher URL", value: @dataset.publisher_url, placeholder: t(:'dataset.publisher_url') %>
  <%= f.select "dataset[license]", @licenses, label: "License", selected: @dataset.license %>
  <%= f.select "dataset[frequency]", [
                                        "One-off",
                                        "Annual",
                                        "Every working day",
                                        "Daily", "Monthly",
                                        "Every minute",
                                        "Every quarter",
                                        "Half yearly",
                                        "Weekly"
                                      ], label: "Publication frequency", selected: @dataset.frequency %>
  <div id="files">
    <h3>Data files</h3>
    <% if @dataset.dataset_files.count == 0 %>
      <%= render partial: "dataset_files/form", locals: { file: DatasetFile.new, f: f } %>
    <% else %>
      <% @dataset.dataset_files.each_with_index do |file, i| %>
        <div class="hidden">
          <%= render partial: "dataset_files/form", locals: { file: DatasetFile.new, f: f, i: i } %>
        </div>
        <%= render partial: "dataset_files/form", locals: { file: file, f: f, i: i } %>
      <% end %>
    <% end %>
  </div>
  <% if current_page?(action: 'new') %>
    <div class="bg-upload">
      <%=
        f.file_field "dataset[schema]",
        label: "Schema",
        help: 'Provide an optional <a href=\'http://csvlint.io/about#how_write_schema\'>schema</a> that all data files must adhere to'.html_safe
      %>
    </div>
  <% end %>
  <p class="text-right" id="wut">
    <%= bs_button_to 'Add another file', '#', style: "success", id: "clone", icon: "glyphicon glyphicon-plus", class: "btn-xs" %>
  </p>
  <button type="submit" class="btn btn-primary btn-lg btn-block">
    Submit <i class="fa fa-refresh fa-spin hidden" id="spinner"></i>
  </button>
<% end %>

<% content_for :extra_js do %>
  <script src="//js.pusher.com/2.2/pusher.min.js"></script>
  <script>
    function bgUpload(elem) {
      var container    = $(elem)
      var fileInput    = $(elem).find('input[type="file"]');
      var form         = $(fileInput.parents('form:first'));
      var submitButton = form.find('button[type="submit"]');
      var progressBar  = $("<div class='progress-bar progress-bar-success progress-bar-striped active' role='progressbar' aria-valuenow='0' aria-valuemin='0' aria-valuemax='100'></div>");
      var barContainer = $("<div class='progress hidden'></div>").append(progressBar);
      fileInput.after(barContainer);
      fileInput.fileupload({
        fileInput:       fileInput,
        url:             form.data('url'),
        type:            'POST',
        autoUpload:       true,
        formData:         form.data('form-data'),
        paramName:        'file', // S3 does not like nested name fields i.e. name="user[avatar_url]"
        dataType:         'XML',  // S3 returns XML if success_action_status is set to 201
        replaceFileInput: false,
        progressall: function (e, data) {
          var progress = parseInt(data.loaded / data.total * 100, 10);
          progressBar.css('width', progress + '%')
          progressBar.attr('aria-valuenow', progress)
          progressBar.text(progress + '%')
        },
        start: function (e) {
          submitButton.prop('disabled', true);

          barContainer.removeClass('hidden');

          // Remove existing hidden fields
          container.find('.s3-file').remove()

          progressBar.
            css('width', '0%')
        },
        done: function(e, data) {
          submitButton.prop('disabled', false);
          progressBar.text("Done");
          progressBar.removeClass('active')
          // extract key and generate URL from response
          var key   = $(data.jqXHR.responseXML).find("Key").text();
          var url   = 'https://' + form.data('host') + '/' + key;

          // create hidden field
          var input = $("<input />", { type:'hidden', name: fileInput.attr('name'), value: url, class: 's3-file' })
          container.append(input);
        },
        fail: function(e, data) {
          submitButton.prop('disabled', false);
          progressBar.removeClass('progress-bar-success')
          progressBar.addClass('progress-bar-danger')

          progressBar.
            css("background", "red").
            text("Upload Failed");
        }
      });
    }

    function postForm(form) {
      var channelID = form.attr('method') + '-<%= SecureRandom.uuid %>'

      console.log(channelID)

      $.ajax({
        type: form.attr('method'),
        url: form.attr('action'),
        data: form.serialize() + '&async=true&channel_id=' + channelID,
        success: bindToPusher(channelID)
      })
    }

    function bindToPusher(channelID) {
      Pusher.host = 'ws-eu.pusher.com';
      Pusher.sockjs_host = 'sockjs-eu.pusher.com';

      var pusher = new Pusher('<%= Pusher.key %>');
      var channel = pusher.subscribe(channelID);

      channel.bind('dataset_created', function(data) {
        if (channelID.match(/post/)) {
          window.location = '/datasets/created'
        } else {
          window.location = '/datasets/edited'
        }
      })
      channel.bind('dataset_failed', function(data) {
        addErrors(data)
      })
    }

    function addErrors(data) {
      $('#spinner').addClass('hidden')
      $('body').scrollTop(0)
      $(data).each(function(i, message) {
        addError(message)
      })

      $('.bg-upload').each(function(i, elem) {
        bgUpload(elem)
      });

      // Destroy any existing progress bars
      $('.progress').addClass('hidden')
    }

    function addError(message) {
      alert = $('<div class="alert alert-danger" role="alert">').text(message)
      $('#main').prepend(alert)
    }

    $(document).ready(function() {
      var file = $('.file:first').clone();

      $('#clone').click(function(e) {
        e.preventDefault();
        clone = $(file).clone()
        clone.find('.title').attr('required', 'required')
        clone.appendTo('#files');
        bgUpload(clone)
      });

      $('.bg-upload').each(function(i, elem) {
        bgUpload(elem)
      });

      $('form').submit(function(e) {
        $('#spinner').removeClass('hidden')

        if ($('.s3-file').length > 0) {
          postForm($(this))
        } else {
          $('body').scrollTop(0)
          addError('You must add at least one file')
          $('#spinner').addClass('hidden')
        }

        e.preventDefault();
      })

      $('input.change-file').on('click', function(e) {
        $(this).attr('style', 'color:red')
        e.stopImmediatePropagation();

        var container = $(this).parents('.file')

        container.find('.current-file').addClass('hidden');
        container.find('.filename-wrapper').append('<div class="form-group"><label class="control-label" for="files[][file]">File</label><input class="bg-upload" id="_files[][file]" label="File" name="[files[][file]]" type="file" accept=".csv" /></div>');
        bgUpload(container)
      })
    });
  </script>
<% end %>
